=begin
#Tiketeo API

#Autenticación: Bearer <secret_key> 

The version of the OpenAPI document: v1
Contact: romario.lopez@tiketeo.mx
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'cgi'

module OpenapiClient
  class WinnersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check Winner
    # Obtiene la información de un ganaddor
    # @param [Hash] opts the optional parameters
    # @option opts [Body2] :body2 
    # @return [InlineResponse2001]
    def check_winner(opts = {})
      data, _status_code, _headers = check_winner_with_http_info(opts)
      data
    end

    # Check Winner
    # Obtiene la información de un ganaddor
    # @param [Hash] opts the optional parameters
    # @option opts [Body2] :body2 
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def check_winner_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WinnersApi.check_winner ...'
      end
      # resource path
      local_var_path = '/winners/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body2'])

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WinnersApi.check_winner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WinnersApi#check_winner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Claim Winner
    # Confirma que un ganador haya obtenido su premio
    # @param winner_id [String] El ID del ganador obtenido en &#x60;/winners/check&#x60;
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def claim_winner(winner_id, opts = {})
      data, _status_code, _headers = claim_winner_with_http_info(winner_id, opts)
      data
    end

    # Claim Winner
    # Confirma que un ganador haya obtenido su premio
    # @param winner_id [String] El ID del ganador obtenido en &#x60;/winners/check&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def claim_winner_with_http_info(winner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WinnersApi.claim_winner ...'
      end
      # verify the required parameter 'winner_id' is set
      if @api_client.config.client_side_validation && winner_id.nil?
        fail ArgumentError, "Missing the required parameter 'winner_id' when calling WinnersApi.claim_winner"
      end
      # resource path
      local_var_path = '/winners/{winnerId}/claim'.sub('{' + 'winnerId' + '}', CGI.escape(winner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse2001'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerAuth']

      new_options = opts.merge(
        :operation => :"WinnersApi.claim_winner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WinnersApi#claim_winner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
